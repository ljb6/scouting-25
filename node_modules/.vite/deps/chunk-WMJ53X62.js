import {
  SignedIn_default
} from "./chunk-PELSXP4R.js";
import {
  SignedOut_default
} from "./chunk-KT67WVF2.js";
import {
  ClerkLoaded_default
} from "./chunk-CQW6S6VZ.js";
import {
  clerkUI
} from "./chunk-V7QTQBGQ.js";
import {
  action,
  add_locations,
  beforeUpdate,
  check_target,
  hmr,
  if_block,
  init,
  legacy_api,
  legacy_rest_props,
  onMount,
  prop,
  wrap_snippet
} from "./chunk-HB3Y2GHA.js";
import {
  append,
  comment,
  template
} from "./chunk-6HJRDU3Y.js";
import {
  FILENAME,
  HMR,
  deep_read_state,
  derived_safe_equal,
  first_child,
  get,
  invalid_default_snippet,
  legacy_pre_effect,
  legacy_pre_effect_reset,
  mark_module_end,
  mark_module_start,
  mutable_state,
  pop,
  push,
  set,
  sibling,
  strict_equals
} from "./chunk-JP5C5KHO.js";

// node_modules/clerk-sveltekit/dist/client/internal/SignX.svelte
import { goto as goto2 } from "$app/navigation";

// node_modules/clerk-sveltekit/dist/client/internal/Redirect.svelte
import { goto } from "$app/navigation";
mark_module_start();
Redirect[FILENAME] = "node_modules/clerk-sveltekit/dist/client/internal/Redirect.svelte";
function Redirect($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Redirect);
  let to = prop($$props, "to", 8, "/");
  onMount(() => {
    goto(to());
  });
  init();
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Redirect = hmr(Redirect, () => Redirect[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Redirect[HMR].source;
    set(Redirect[HMR].source, module.default[HMR].original);
  });
}
var Redirect_default = Redirect;
mark_module_end(Redirect);

// node_modules/clerk-sveltekit/dist/client/internal/SignX.svelte
mark_module_start();
SignX[FILENAME] = "node_modules/clerk-sveltekit/dist/client/internal/SignX.svelte";
var root_4 = add_locations(template(`<div></div>`), SignX[FILENAME], [[59, 3]]);
var root_2 = add_locations(template(`<!> <!>`, 1), SignX[FILENAME], []);
function SignX($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  push($$props, false, SignX);
  const afterSignXUrl = mutable_state();
  const redirectUrlFromParam = mutable_state();
  let x = prop($$props, "x", 8, "in");
  let componentType = mutable_state("SignIn");
  const CANCEL_AFTER = 5e3;
  const REDIRECT_AFTER_AUTH = "redirectAfterAuth";
  const REDIRECT_URL = "redirectUrl";
  const EVENT_USER = "clerk-sveltekit:user";
  let clerkRedirectUrl = mutable_state(get(redirectUrlFromParam));
  let showForm = mutable_state(false);
  let timeout;
  let didAuthRedirect = false;
  function redirectOnceLoggedIn(url) {
    const callback = () => {
      if (didAuthRedirect) return;
      didAuthRedirect = true;
      document.removeEventListener(EVENT_USER, callback);
      clearTimeout(timeout);
      goto2(url);
    };
    document.addEventListener(EVENT_USER, callback);
  }
  beforeUpdate(() => {
    const url = new URL(window.location.toString());
    set(redirectUrlFromParam, url.searchParams.get(REDIRECT_URL) ?? get(redirectUrlFromParam));
    if (!get(showForm)) {
      const redirectUrl = url.searchParams.get(REDIRECT_URL) ?? $$sanitized_props.redirectUrl;
      if (url.searchParams.has(REDIRECT_AFTER_AUTH)) {
        redirectOnceLoggedIn(url.searchParams.get(REDIRECT_AFTER_AUTH) ?? "/");
        timeout = setTimeout(() => set(showForm, true), CANCEL_AFTER);
      } else {
        set(showForm, true);
      }
      url.searchParams.delete(REDIRECT_URL);
      url.searchParams.set(REDIRECT_AFTER_AUTH, get(redirectUrlFromParam));
      set(clerkRedirectUrl, url.toString());
    }
  });
  legacy_pre_effect(() => deep_read_state(x()), () => {
    set(afterSignXUrl, strict_equals(x(), "in") ? "afterSignInUrl" : "afterSignUpUrl");
  });
  legacy_pre_effect(() => deep_read_state(x()), () => {
    set(componentType, strict_equals(x(), "in") ? "SignIn" : "SignUp");
  });
  legacy_pre_effect(
    () => (deep_read_state($$sanitized_props), get(afterSignXUrl)),
    () => {
      set(redirectUrlFromParam, $$sanitized_props.redirectUrl || $$sanitized_props[get(afterSignXUrl)] || "/");
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      ClerkLoaded_default(node_1, {
        children: invalid_default_snippet,
        $$slots: {
          default: ($$anchor3, $$slotProps) => {
            const clerk = derived_safe_equal(() => $$slotProps.clerk);
            var fragment_2 = root_2();
            var node_2 = first_child(fragment_2);
            SignedIn_default(node_2, {
              children: wrap_snippet(SignX, ($$anchor4, $$slotProps2) => {
                var fragment_3 = comment();
                var node_3 = first_child(fragment_3);
                Redirect_default(node_3, {
                  get to() {
                    return get(redirectUrlFromParam);
                  }
                });
                append($$anchor4, fragment_3);
              }),
              $$slots: { default: true }
            });
            var node_4 = sibling(node_2, 2);
            SignedOut_default(node_4, {
              children: wrap_snippet(SignX, ($$anchor4, $$slotProps2) => {
                var div = root_4();
                action(div, ($$node, $$action_arg) => {
                  var _a;
                  return (_a = clerkUI) == null ? void 0 : _a($$node, $$action_arg);
                }, () => ({
                  clerk: get(clerk),
                  componentType: get(componentType),
                  props: {
                    ...$$sanitized_props,
                    redirectUrl: get(clerkRedirectUrl),
                    [get(afterSignXUrl)]: null
                  }
                }));
                append($$anchor4, div);
              }),
              $$slots: { default: true }
            });
            append($$anchor3, fragment_2);
          }
        }
      });
      append($$anchor2, fragment_1);
    };
    if_block(node, ($$render) => {
      if (get(showForm)) $$render(consequent);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SignX = hmr(SignX, () => SignX[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SignX[HMR].source;
    set(SignX[HMR].source, module.default[HMR].original);
  });
}
var SignX_default = SignX;
mark_module_end(SignX);

export {
  SignX_default
};
//# sourceMappingURL=chunk-WMJ53X62.js.map
